{"version":3,"file":"extension.js","mappings":"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","sources":[".././src/ui/chatWebviewProvider.ts",".././src/utils.ts",".././src/extension.ts","../external node-commonjs \"child_process\"",".././src/service/claudeCodeService.ts","../external commonjs \"vscode\"","../external node-commonjs \"events\"","../external node-commonjs \"fs\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["import * as vscode from \"vscode\";\nimport { getNonce } from \"../utils\";\nimport { ClaudeCodeService, ClaudeMessage } from \"../service/claudeCodeService\";\n\nexport class ChatWebviewProvider implements vscode.WebviewViewProvider {\n  public static readonly viewType = \"claudeCodeChatView\";\n  private _view?: vscode.WebviewView;\n  private _messageListeners: vscode.Disposable[] = [];\n\n  constructor(\n    private readonly _extensionUri: vscode.Uri,\n    private readonly _claudeCodeService: ClaudeCodeService\n  ) {}\n\n  public resolveWebviewView(\n    webviewView: vscode.WebviewView,\n    context: vscode.WebviewViewResolveContext,\n    _token: vscode.CancellationToken\n  ) {\n    this._view = webviewView;\n    \n    webviewView.webview.options = {\n      // Enable scripts in the webview\n      enableScripts: true,\n\n      // Restrict the webview to only load resources from the extension's directory\n      localResourceRoots: [this._extensionUri],\n    };\n\n    // Set the webview's HTML content\n    webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\n\n    // Handle messages from the webview\n    webviewView.webview.onDidReceiveMessage(\n      (message) => {\n        switch (message.command) {\n          case \"sendMessage\":\n            this._handleUserMessage(message.text);\n            return;\n        }\n      },\n      undefined,\n      []\n    );\n\n    // Set up listeners for Claude Code service events\n    this._setupClaudeCodeListeners();\n  }\n\n  private _setupClaudeCodeListeners() {\n    // Clean up any existing listeners\n    this._disposeMessageListeners();\n\n    // Add message listener\n    this._messageListeners.push(\n      this._claudeCodeService.onMessage((message: ClaudeMessage) => {\n        if (!this._view) {\n          return;\n        }\n\n        this._view.webview.postMessage({\n          command: \"receiveMessage\",\n          sender: message.role,\n          text: message.content,\n          timestamp: new Date().toISOString(),\n        });\n      })\n    );\n\n    // Add error listener\n    this._messageListeners.push(\n      this._claudeCodeService.onError((error: string) => {\n        if (!this._view) {\n          return;\n        }\n\n        this._view.webview.postMessage({\n          command: \"receiveMessage\",\n          sender: \"claude\",\n          text: `⚠️ Error: ${error}`,\n          timestamp: new Date().toISOString(),\n        });\n\n        vscode.window.showErrorMessage(`Claude Code error: ${error}`);\n      })\n    );\n\n    // Add exit listener\n    this._messageListeners.push(\n      this._claudeCodeService.onExit((code: number) => {\n        if (!this._view) {\n          return;\n        }\n\n        // Don't flood UI with restart messages\n        if (code !== 0) {\n          this._view.webview.postMessage({\n            command: \"receiveMessage\",\n            sender: \"claude\",\n            text: `Claude Code process exited. Attempting to restart...`,\n            timestamp: new Date().toISOString(),\n          });\n        }\n\n        // Add delay before restart to prevent immediate crash loops\n        setTimeout(() => {\n          // Try to restart the process\n          this._claudeCodeService.start().catch(error => {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            vscode.window.showErrorMessage(`Failed to restart Claude Code: ${errorMessage}`);\n            \n            this._view?.webview.postMessage({\n              command: \"receiveMessage\",\n              sender: \"claude\",\n              text: `⚠️ Error restarting Claude Code. Please try again or restart VS Code.`,\n              timestamp: new Date().toISOString(),\n            });\n          });\n        }, 2000);\n      })\n    );\n  }\n\n  private _disposeMessageListeners() {\n    for (const disposable of this._messageListeners) {\n      disposable.dispose();\n    }\n    this._messageListeners = [];\n  }\n\n  private async _handleUserMessage(text: string) {\n    try {\n      // Send message to Claude Code process\n      await this._claudeCodeService.sendMessage(text);\n    } catch (error) {\n      if (!this._view) {\n        return;\n      }\n\n      // Get error message safely\n      const errorMessage = error instanceof Error \n        ? error.message \n        : String(error);\n\n      // Show error in UI\n      this._view.webview.postMessage({\n        command: \"receiveMessage\",\n        sender: \"claude\",\n        text: `⚠️ Error: Failed to send message to Claude Code. ${errorMessage}`,\n        timestamp: new Date().toISOString(),\n      });\n\n      vscode.window.showErrorMessage(`Failed to send message to Claude Code: ${errorMessage}`);\n    }\n  }\n\n  private _getHtmlForWebview(webview: vscode.Webview) {\n    // Generate a nonce for script security\n    const nonce = getNonce();\n\n    // Get paths to local resources\n    const styleUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"media\", \"styles.css\")\n    );\n    const scriptUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"media\", \"main.js\")\n    );\n    const claudeIconPath = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"resources\", \"claude-icon.svg\")\n    );\n\n    return /* html */ `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${webview.cspSource}; img-src ${webview.cspSource} data:; script-src 'nonce-${nonce}';\">\n      <title>Claude Code Chat</title>\n      <link href=\"${styleUri}\" rel=\"stylesheet\">\n      </head>\n      <body>\n      <div class=\"chat-container\">\n\n        <!-- Message container -->\n        <div id=\"messages\" class=\"messages\"></div>\n        \n        <!-- Input area styled like Claude -->\n        <div class=\"input-container\">\n        <div class=\"input-wrapper\">\n          <textarea id=\"messageInput\" placeholder=\"Ask Claude Code...\" rows=\"1\"></textarea>\n          <div class=\"input-actions\">\n          <button id=\"sendButton\">\n            Send\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\" fill=\"currentColor\"/>\n            </svg>\n          </button>\n          </div>\n        </div>\n        </div>\n        \n        <!-- Claude attribution footer -->\n        <div class=\"utility-row\">\n        <div class=\"claude-attribution\">\n          <img class=\"claude-flower\" src=\"${claudeIconPath}\" width=\"16\" height=\"16\" alt=\"Claude Icon\" />\n          <span>Claude can make mistakes. Please double-check responses.</span>\n        </div>\n        <div class=\"claude-version\">\n          <span>Claude 3.7 Sonnet</span>\n        </div>\n        </div>\n      </div>\n      <script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n      </body>\n      </html>\n    `;\n  }\n}\n","/**\n * Generates a nonce string for Content Security Policy\n */\nexport function getNonce() {\n  let text = '';\n  const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 32; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}","import * as vscode from 'vscode';\nimport { ChatWebviewProvider } from './ui/chatWebviewProvider';\nimport { ClaudeCodeService } from './service/claudeCodeService';\n\nexport function activate(context: vscode.ExtensionContext) {\n  console.log('Claude Code extension is now active!');\n\n  // Initialize Claude Code Service\n  const claudeCodeService = new ClaudeCodeService();\n  claudeCodeServiceInstance = claudeCodeService;\n  \n  // Register Chat Webview Provider with Claude Code Service\n  const chatWebviewProvider = new ChatWebviewProvider(context.extensionUri, claudeCodeService);\n  context.subscriptions.push(\n    vscode.window.registerWebviewViewProvider('claudeCodeChatView', chatWebviewProvider)\n  );\n\n  // Register command to start/show chat\n  const startChatCommand = vscode.commands.registerCommand('claude-code-extension.startChat', () => {\n    vscode.commands.executeCommand('claudeCodeChatView.focus');\n  });\n\n  context.subscriptions.push(startChatCommand);\n  \n  // Add Claude process cleanup to subscriptions\n  context.subscriptions.push({\n    dispose: () => {\n      if (claudeCodeServiceInstance) {\n        claudeCodeServiceInstance.stop();\n      }\n    }\n  });\n  \n  // Start the Claude Code Service\n  claudeCodeService.start().catch(error => {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    vscode.window.showErrorMessage(`Failed to start Claude Code: ${errorMessage}`);\n  });\n}\n\n// Store a reference to the Claude Code Service for cleanup\nlet claudeCodeServiceInstance: ClaudeCodeService | undefined;\n\nexport function deactivate() {\n  // Clean up resources when extension is deactivated\n  if (claudeCodeServiceInstance) {\n    console.log('Stopping Claude Code process on deactivation');\n    claudeCodeServiceInstance.stop();\n    claudeCodeServiceInstance = undefined;\n  }\n}","module.exports = require(\"child_process\");","import * as vscode from 'vscode';\nimport * as child_process from 'child_process';\nimport { EventEmitter } from 'events';\nimport { exec } from 'child_process';\n\nexport interface ClaudeMessage {\n  role: 'user' | 'assistant';\n  content: string;\n}\n\nexport class ClaudeCodeService {\n  private messageEmitter = new EventEmitter();\n  private isProcessReady = false;\n\n  constructor() {\n    this.messageEmitter.setMaxListeners(100);\n  }\n\n  /**\n   * Start the Claude Code service\n   */\n  public async start(): Promise<void> {\n    // Simple non-interactive test to check Claude installation\n    exec('which claude', (error, stdout, stderr) => {\n      if (error) {\n        console.error(`Error checking for Claude: ${error.message}`);\n        this.messageEmitter.emit('error', 'Claude Code CLI is not installed or not in the PATH');\n        return;\n      }\n      \n      console.log(`Found Claude at: ${stdout.trim()}`);\n      this.isProcessReady = true;\n      this.messageEmitter.emit('ready');\n      \n      // Send the ready message to the UI\n      this.messageEmitter.emit('message', {\n        role: 'assistant',\n        content: 'Claude Code found. How can I help you with your project?'\n      });\n    });\n  }\n\n  /**\n   * Send a message to Claude\n   */\n  public async sendMessage(message: string): Promise<void> {\n    if (!this.isProcessReady) {\n      await this.start();\n    }\n\n    // Emit the user message first\n    this.messageEmitter.emit('message', {\n      role: 'user',\n      content: message\n    });\n\n    // Create a temporary script file to handle the trust prompt\n    const tempScriptFile = '/tmp/claude_vscode_script.sh';\n    const scriptContent = `#!/bin/bash\n# Script to handle Claude interaction\n(echo \"1\"; echo \"${message}\") | TERM=xterm-256color claude -p 2>/dev/null\n`;\n\n    // Write the script file\n    const fs = require('fs');\n    fs.writeFileSync(tempScriptFile, scriptContent);\n    fs.chmodSync(tempScriptFile, '755');\n    \n    // Execute the script\n    console.log('Executing Claude via script file');\n    \n    exec(`bash ${tempScriptFile}`, { env: { ...process.env, TERM: 'xterm-256color' } }, (error, stdout, stderr) => {\n      // Clean up the temp file\n      try {\n        fs.unlinkSync(tempScriptFile);\n      } catch (e) {\n        console.error('Error removing temp file:', e);\n      }\n      \n      if (error) {\n        console.error(`Error from Claude: ${error.message}`);\n        this.messageEmitter.emit('error', `Error from Claude: ${error.message}`);\n        return;\n      }\n      \n      if (stderr) {\n        console.error(`Claude stderr: ${stderr}`);\n      }\n      \n      // Emit the response\n      this.messageEmitter.emit('message', {\n        role: 'assistant',\n        content: stdout.trim() || 'No response received from Claude. There might be an issue with the CLI.'\n      });\n      \n      console.log('Claude response sent to UI');\n    });\n  }\n\n  /**\n   * Stop the Claude process\n   */\n  public stop(): void {\n    // No long-running process to stop\n    this.isProcessReady = false;\n  }\n\n  /**\n   * Subscribe to messages from Claude\n   */\n  public onMessage(callback: (message: ClaudeMessage) => void): vscode.Disposable {\n    const listener = (message: ClaudeMessage) => {\n      callback(message);\n    };\n    \n    this.messageEmitter.on('message', listener);\n    \n    return {\n      dispose: () => {\n        this.messageEmitter.removeListener('message', listener);\n      }\n    };\n  }\n\n  /**\n   * Subscribe to errors from the Claude process\n   */\n  public onError(callback: (error: string) => void): vscode.Disposable {\n    const listener = (error: string) => {\n      callback(error);\n    };\n    \n    this.messageEmitter.on('error', listener);\n    \n    return {\n      dispose: () => {\n        this.messageEmitter.removeListener('error', listener);\n      }\n    };\n  }\n\n  /**\n   * Subscribe to process exit events\n   */\n  public onExit(callback: (code: number) => void): vscode.Disposable {\n    const listener = (code: number) => {\n      callback(code);\n    };\n    \n    this.messageEmitter.on('exit', listener);\n    \n    return {\n      dispose: () => {\n        this.messageEmitter.removeListener('exit', listener);\n      }\n    };\n  }\n}","module.exports = require(\"vscode\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["ChatWebviewProvider","constructor","_extensionUri","_claudeCodeService","_messageListeners","resolveWebviewView","webviewView","context","_token","this","_view","webview","options","enableScripts","localResourceRoots","html","_getHtmlForWebview","onDidReceiveMessage","message","command","_handleUserMessage","text","undefined","_setupClaudeCodeListeners","_disposeMessageListeners","push","onMessage","postMessage","sender","role","content","timestamp","Date","toISOString","onError","error","vscode","window","showErrorMessage","onExit","code","setTimeout","start","catch","errorMessage","Error","String","disposable","dispose","sendMessage","nonce","getNonce","styleUri","asWebviewUri","Uri","joinPath","scriptUri","claudeIconPath","cspSource","viewType","i","charAt","Math","floor","possible","random","console","log","claudeCodeService","ClaudeCodeService","claudeCodeServiceInstance","chatWebviewProvider","extensionUri","subscriptions","registerWebviewViewProvider","startChatCommand","commands","registerCommand","executeCommand","stop","module","exports","require","messageEmitter","EventEmitter","isProcessReady","setMaxListeners","exec","stdout","stderr","emit","trim","tempScriptFile","scriptContent","fs","writeFileSync","chmodSync","env","process","TERM","unlinkSync","e","callback","listener","on","removeListener","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}