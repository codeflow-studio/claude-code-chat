{"version":3,"file":"extension.js","mappings":"u5BAAA,kBACA,SAEA,MAAaA,EAGX,WAAAC,CACmBC,GAAA,KAAAA,cAAAA,CAChB,CAEI,kBAAAC,CACLC,EACAC,EACAC,GAEAF,EAAYG,QAAQC,QAAU,CAE5BC,eAAe,EAGfC,mBAAoB,CAACC,KAAKT,gBAI5BE,EAAYG,QAAQK,KAAOD,KAAKE,mBAAmBT,EAAYG,SAG/DH,EAAYG,QAAQO,qBAClBC,IAES,gBADCA,EAAQC,SAGZL,KAAKM,mBAAmBb,EAAYG,QAASQ,EAAQG,KAEzD,QAEFC,EACA,GAEJ,CAEQ,kBAAAF,CAAmBV,EAAyBW,GAGlDE,YAAW,KACTb,EAAQc,YAAY,CAClBL,QAAS,iBACTM,OAAQ,SACRJ,KAAM,cAAcA,6ZACpBK,WAAW,IAAIC,MAAOC,eACtB,GACD,KACL,CAEQ,kBAAAZ,CAAmBN,GAEzB,MAAMmB,GAAQ,IAAAC,YAGRC,EAAWrB,EAAQsB,aAAaC,EAAOC,IAAIC,SAASrB,KAAKT,cAAe,QAAS,eACjF+B,EAAY1B,EAAQsB,aAAaC,EAAOC,IAAIC,SAASrB,KAAKT,cAAe,QAAS,YAGxF,OAFuBK,EAAQsB,aAAaC,EAAOC,IAAIC,SAASrB,KAAKT,cAAe,YAAa,oBAEhF,4QAMuEK,EAAQ2B,sBAAsB3B,EAAQ2B,sCAAsCR,uEAElJE,m3EA+CGF,WAAeO,mDAItC,EAvHF,wBACyB,EAAAE,SAAW,oB,+DCDpC,sBACE,IAAIjB,EAAO,GAEX,IAAK,IAAIkB,EAAI,EAAGA,EAAI,GAAIA,IACtBlB,GAFe,iEAEEmB,OAAOC,KAAKC,MAAsBC,GAAhBF,KAAKG,WAE1C,OAAOvB,CACT,C,m2BCPA,oBAAyBb,GACvBqC,QAAQC,IAAI,wCAGZ,MAAMC,EAAsB,IAAI,EAAA5C,oBAAoBK,EAAQwC,cAC5DxC,EAAQyC,cAAcC,KACpBjB,EAAOkB,OAAOC,4BAA4B,qBAAsBL,IAIlE,MAAMM,EAAmBpB,EAAOqB,SAASC,gBAAgB,mCAAmC,KAC1FtB,EAAOqB,SAASE,eAAe,2BAA2B,IAG5DhD,EAAQyC,cAAcC,KAAKG,EAC7B,EAEA,wBAEA,EAtBA,kBACA,O,UCDAI,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBzC,IAAjB0C,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAO,EAAoBF,GAAUG,KAAKT,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":[".././src/ui/chatWebviewProvider.ts",".././src/utils.ts",".././src/extension.ts","../external commonjs \"vscode\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\nimport { getNonce } from '../utils';\n\nexport class ChatWebviewProvider implements vscode.WebviewViewProvider {\n  public static readonly viewType = 'claudeCodeChatView';\n\n  constructor(\n    private readonly _extensionUri: vscode.Uri,\n  ) {}\n\n  public resolveWebviewView(\n    webviewView: vscode.WebviewView,\n    context: vscode.WebviewViewResolveContext,\n    _token: vscode.CancellationToken,\n  ) {\n    webviewView.webview.options = {\n      // Enable scripts in the webview\n      enableScripts: true,\n      \n      // Restrict the webview to only load resources from the extension's directory\n      localResourceRoots: [this._extensionUri]\n    };\n\n    // Set the webview's HTML content\n    webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\n\n    // Handle messages from the webview\n    webviewView.webview.onDidReceiveMessage(\n      message => {\n        switch (message.command) {\n          case 'sendMessage':\n            // TODO: Send message to Claude Code process\n            this._handleUserMessage(webviewView.webview, message.text);\n            return;\n        }\n      },\n      undefined,\n      []\n    );\n  }\n\n  private _handleUserMessage(webview: vscode.Webview, text: string) {\n    // For now, just echo the message back with a mock response\n    // Later, this will connect to the actual Claude Code process\n    setTimeout(() => {\n      webview.postMessage({\n        command: 'receiveMessage',\n        sender: 'claude',\n        text: `You said: \"${text}\"\\n\\nThis is a placeholder response that demonstrates Claude's formatting capabilities.\\n\\n## Code Example\\n\\n\\`\\`\\`javascript\\n// This demonstrates syntax highlighting\\nfunction exampleFunction() {\\n  return \"Hello world!\";\\n}\\n\\`\\`\\`\\n\\n### Features\\n\\n* Markdown support\\n* Code highlighting\\n* Lists like this one\\n\\n> Claude Code helps you write, understand, and improve your code directly within VSCode.`,\n        timestamp: new Date().toISOString()\n      });\n    }, 1500);\n  }\n\n  private _getHtmlForWebview(webview: vscode.Webview) {\n    // Generate a nonce for script security\n    const nonce = getNonce();\n\n    // Get paths to local resources\n    const styleUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'media', 'styles.css'));\n    const scriptUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'media', 'main.js'));\n    const claudeIconPath = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'resources', 'claude-icon.svg'));\n\n    return /* html */`\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${webview.cspSource}; img-src ${webview.cspSource} data:; script-src 'nonce-${nonce}';\">\n        <title>Claude Code Chat</title>\n        <link href=\"${styleUri}\" rel=\"stylesheet\">\n      </head>\n      <body>\n        <div class=\"chat-container\">\n          <!-- Chat header with Claude branding -->\n          <div class=\"chat-header\">\n            <div class=\"chat-header-logo\">\n              <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#5A32FB\"/>\n                <path d=\"M6 12C6 8.68629 8.68629 6 12 6C15.3137 6 18 8.68629 18 12C18 15.3137 15.3137 18 12 18C8.68629 18 6 15.3137 6 12Z\" fill=\"white\"/>\n                <path d=\"M10.5 10H13.5C14.0523 10 14.5 10.4477 14.5 11V15C14.5 15.5523 14.0523 16 13.5 16H10.5C9.94772 16 9.5 15.5523 9.5 15V11C9.5 10.4477 9.94772 10 10.5 10Z\" fill=\"#5A32FB\"/>\n              </svg>\n              <span class=\"chat-header-title\">Claude Code</span>\n            </div>\n          </div>\n          \n          <!-- Message container -->\n          <div id=\"messages\" class=\"messages\"></div>\n          \n          <!-- Input area styled like Claude -->\n          <div class=\"input-container\">\n            <div class=\"input-wrapper\">\n              <textarea id=\"messageInput\" placeholder=\"Ask Claude Code...\" rows=\"1\"></textarea>\n              <div class=\"input-actions\">\n                <button id=\"sendButton\">\n                  Send\n                  <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\" fill=\"currentColor\"/>\n                  </svg>\n                </button>\n              </div>\n            </div>\n          </div>\n          \n          <!-- Claude attribution footer -->\n          <div class=\"utility-row\">\n            <div class=\"claude-attribution\">\n              <svg class=\"claude-flower\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M12 2L14.2451 9.75492H22L15.8774 14.4896L18.1226 22.2451L12 17.5104L5.87745 22.2451L8.12255 14.4896L2 9.75492H9.75492L12 2Z\" fill=\"currentColor\"/>\n              </svg>\n              <span>Claude can make mistakes. Please double-check responses.</span>\n            </div>\n            <div class=\"claude-version\">\n              <span>Claude 3.7 Sonnet</span>\n            </div>\n          </div>\n        </div>\n        <script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n      </body>\n      </html>\n    `;\n  }\n}","/**\n * Generates a nonce string for Content Security Policy\n */\nexport function getNonce() {\n  let text = '';\n  const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 32; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}","import * as vscode from 'vscode';\nimport { ChatWebviewProvider } from './ui/chatWebviewProvider';\n\nexport function activate(context: vscode.ExtensionContext) {\n  console.log('Claude Code extension is now active!');\n\n  // Register Chat Webview Provider\n  const chatWebviewProvider = new ChatWebviewProvider(context.extensionUri);\n  context.subscriptions.push(\n    vscode.window.registerWebviewViewProvider('claudeCodeChatView', chatWebviewProvider)\n  );\n\n  // Register command to start/show chat\n  const startChatCommand = vscode.commands.registerCommand('claude-code-extension.startChat', () => {\n    vscode.commands.executeCommand('claudeCodeChatView.focus');\n  });\n\n  context.subscriptions.push(startChatCommand);\n}\n\nexport function deactivate() {\n  // Clean up resources when extension is deactivated\n}","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["ChatWebviewProvider","constructor","_extensionUri","resolveWebviewView","webviewView","context","_token","webview","options","enableScripts","localResourceRoots","this","html","_getHtmlForWebview","onDidReceiveMessage","message","command","_handleUserMessage","text","undefined","setTimeout","postMessage","sender","timestamp","Date","toISOString","nonce","getNonce","styleUri","asWebviewUri","vscode","Uri","joinPath","scriptUri","cspSource","viewType","i","charAt","Math","floor","possible","random","console","log","chatWebviewProvider","extensionUri","subscriptions","push","window","registerWebviewViewProvider","startChatCommand","commands","registerCommand","executeCommand","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}